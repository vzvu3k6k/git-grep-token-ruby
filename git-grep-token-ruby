#!/usr/bin/env ruby

require "parser/current"
require "shellwords"

def search(node, return_when_finding: true, &block)
  node.children.each.with_object([]) do |child, result|
    next unless child.is_a?(Parser::AST::Node)
    if block.call(child)
      result << child
      next if return_when_finding
    end
    result.concat(search(child, return_when_finding: return_when_finding, &block))
  end
end

def extract(ast, word)
  search(ast) do |node|
    (node.type == :block && node.children[0].type == :send && node.children[0].children[1] == word) || # for passing a literal block
      (node.children.any?{|c| c == word })
  end.map do |node|
    last_heredoc_pos = search(node, return_when_finding: false){|c| (c.type == :dstr || c.type == :str)}
      .map{|node| node.loc.expression}.max{|i| i.end_pos}

    start = node.loc.expression
    finish = [last_heredoc_pos, node.loc.expression].max_by do |i|
      if i.nil?
        -1
      else
        i.end_pos
      end
    end
    [start, finish, node]
  end
end

def wrap(node)
  if node.type != :begin
    node = AST::Node.new(:begin, [node])
  else
    node
  end
end

if $0 == __FILE__
  word = ARGV.shift.to_sym
  opts = ARGV

  cmd = "git grep --name-only #{Shellwords.escape(word)} #{[opts].flatten.compact.map{|a| Shellwords.escape(a)}.join(" ")}"
  `#{cmd}`.each_line do |file|
    file.strip!
    code = File.read(file)
    ast = Parser::CurrentRuby.parse(code)

    if ast.type != :begin
      ast = AST::Node.new(:begin, [ast])
    end

    extract(ast, word).each do |(expression_start, expression_finish, node)|
      start_line_num = expression_start.begin.line
      line_start = (expression_start.begin_pos).downto(0).find{|i| code[i] == "\n"}
      line_start = line_start.nil? ? 0 : line_start + 1
      line_finish = (expression_finish.end_pos - 1).upto(code.size).find{|i| code[i] == "\n"}

      token_positions = search(wrap(node), return_when_finding: false) do |node|
        node.children.any?{|c| c == word}
      end.map do |node|
        [:name, :selector].find do |prop|
          break node.loc.send(prop) rescue next
        end
      end.compact

      fragment = code[line_start .. line_finish]
      prefix = "\x1b[01;31m"
      suffix = "\x1b[0m"
      offset_unit = prefix.size + suffix.size
      token_positions.each_with_index do |wp, idx|
        base_offset = offset_unit * idx
        fragment[wp.begin_pos - line_start + base_offset, 0] = prefix
        fragment[wp.end_pos - line_start + base_offset + prefix.size , 0] = suffix
      end

      highlighted_fragment = fragment.each_line.map.with_index do |line, idx|
        "#{"%6d" % [start_line_num + idx]}  #{line}"
      end.to_a.join

      puts "#{file}:#{start_line_num}"
      puts highlighted_fragment
    end
  end
end
